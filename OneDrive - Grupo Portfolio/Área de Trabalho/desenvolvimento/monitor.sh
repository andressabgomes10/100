#!/bin/bash
# üìä Script de Monitoramento da API

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

API_URL="http://localhost:3001"
API_KEY="NG_API_SK_1759414399452_aqmotc1wab70nels6brz2fo"

# Fun√ß√£o para fazer requisi√ß√£o
make_request() {
    local endpoint=$1
    local method=${2:-GET}
    local data=$3
    
    if [ -n "$data" ]; then
        curl -s -X $method \
             -H "x-api-key: $API_KEY" \
             -H "Content-Type: application/json" \
             -d "$data" \
             "$API_URL$endpoint"
    else
        curl -s -X $method \
             -H "x-api-key: $API_KEY" \
             "$API_URL$endpoint"
    fi
}

# Verificar sa√∫de da aplica√ß√£o
check_health() {
    echo -e "${BLUE}üè• Verificando sa√∫de da aplica√ß√£o...${NC}"
    
    local response=$(make_request "/health")
    local status=$(echo $response | jq -r '.ok' 2>/dev/null)
    
    if [ "$status" = "true" ]; then
        echo -e "${GREEN}‚úÖ Aplica√ß√£o est√° saud√°vel${NC}"
        echo "$response" | jq '.'
    else
        echo -e "${RED}‚ùå Aplica√ß√£o n√£o est√° saud√°vel${NC}"
        echo "$response"
        return 1
    fi
}

# Verificar estat√≠sticas
check_stats() {
    echo -e "${BLUE}üìä Verificando estat√≠sticas...${NC}"
    
    local response=$(make_request "/stats")
    echo "$response" | jq '.'
}

# Testar busca de CEP
test_cep() {
    echo -e "${BLUE}üìç Testando busca de CEP...${NC}"
    
    local response=$(make_request "/cep/60115000")
    local cidade=$(echo $response | jq -r '.cidade' 2>/dev/null)
    
    if [ "$cidade" != "null" ] && [ -n "$cidade" ]; then
        echo -e "${GREEN}‚úÖ Busca de CEP funcionando${NC}"
        echo "$response" | jq '.'
    else
        echo -e "${RED}‚ùå Busca de CEP falhou${NC}"
        echo "$response"
    fi
}

# Testar revenda mais pr√≥xima
test_nearest() {
    echo -e "${BLUE}üè¢ Testando revenda mais pr√≥xima...${NC}"
    
    local data='{"lat":-3.73,"lng":-38.52,"tipo":"empresarial"}'
    local response=$(make_request "/test/revenda-mais-proxima" "POST" "$data")
    local cnpj=$(echo $response | jq -r '.revenda.cnpj' 2>/dev/null)
    
    if [ "$cnpj" != "null" ] && [ -n "$cnpj" ]; then
        echo -e "${GREEN}‚úÖ Revenda mais pr√≥xima funcionando${NC}"
        echo "$response" | jq '.'
    else
        echo -e "${YELLOW}‚ö†Ô∏è Revenda mais pr√≥xima: $response${NC}"
    fi
}

# Verificar logs do PM2
check_logs() {
    echo -e "${BLUE}üìã Verificando logs recentes...${NC}"
    
    if command -v pm2 &> /dev/null; then
        echo -e "${YELLOW}√öltimas 10 linhas de log:${NC}"
        pm2 logs revenda-api --lines 10 --nostream
    else
        echo -e "${YELLOW}PM2 n√£o encontrado${NC}"
    fi
}

# Verificar uso de recursos
check_resources() {
    echo -e "${BLUE}üíª Verificando uso de recursos...${NC}"
    
    if command -v pm2 &> /dev/null; then
        pm2 status
    fi
    
    echo -e "${YELLOW}Uso de CPU e Mem√≥ria:${NC}"
    top -bn1 | grep "Cpu\|Mem" | head -2
}

# Verificar conectividade
check_connectivity() {
    echo -e "${BLUE}üåê Verificando conectividade...${NC}"
    
    # Verificar se porta est√° aberta
    if netstat -tuln | grep -q ":3001"; then
        echo -e "${GREEN}‚úÖ Porta 3001 est√° aberta${NC}"
    else
        echo -e "${RED}‚ùå Porta 3001 n√£o est√° aberta${NC}"
    fi
    
    # Verificar resposta HTTP
    if curl -s -f "$API_URL/health" > /dev/null; then
        echo -e "${GREEN}‚úÖ API responde HTTP${NC}"
    else
        echo -e "${RED}‚ùå API n√£o responde HTTP${NC}"
    fi
}

# Menu principal
show_menu() {
    echo -e "${BLUE}üìä Monitoramento da Revenda API${NC}"
    echo "1. Verificar sa√∫de"
    echo "2. Verificar estat√≠sticas"
    echo "3. Testar busca de CEP"
    echo "4. Testar revenda mais pr√≥xima"
    echo "5. Verificar logs"
    echo "6. Verificar recursos"
    echo "7. Verificar conectividade"
    echo "8. Executar todos os testes"
    echo "0. Sair"
}

# Executar todos os testes
run_all_tests() {
    echo -e "${BLUE}üöÄ Executando todos os testes...${NC}"
    echo "=================================="
    
    check_health
    echo ""
    
    check_stats
    echo ""
    
    test_cep
    echo ""
    
    test_nearest
    echo ""
    
    check_logs
    echo ""
    
    check_resources
    echo ""
    
    check_connectivity
    echo ""
    
    echo -e "${GREEN}‚úÖ Todos os testes conclu√≠dos!${NC}"
}

# Menu interativo
if [ $# -eq 0 ]; then
    while true; do
        show_menu
        read -p "Escolha uma op√ß√£o: " choice
        
        case $choice in
            1) check_health ;;
            2) check_stats ;;
            3) test_cep ;;
            4) test_nearest ;;
            5) check_logs ;;
            6) check_resources ;;
            7) check_connectivity ;;
            8) run_all_tests ;;
            0) echo "Saindo..."; exit 0 ;;
            *) echo "Op√ß√£o inv√°lida" ;;
        esac
        
        echo ""
        read -p "Pressione Enter para continuar..."
        clear
    done
else
    # Executar comando espec√≠fico
    case $1 in
        health) check_health ;;
        stats) check_stats ;;
        cep) test_cep ;;
        nearest) test_nearest ;;
        logs) check_logs ;;
        resources) check_resources ;;
        connectivity) check_connectivity ;;
        all) run_all_tests ;;
        *) echo "Uso: $0 [health|stats|cep|nearest|logs|resources|connectivity|all]" ;;
    esac
fi
